// <auto-generated />
using System;
using FastFoodOnline.DataAccess.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FastFoodOnline.Migrations
{
    [DbContext(typeof(FastFoodDbContext))]
    [Migration("20180606142734_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799");

            modelBuilder.Entity("FastFoodOnline.Models.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<float>("Price");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("FastFoodOnline.Models.FoodOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FoodId");

                    b.Property<int>("PaymentId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("PaymentId");

                    b.ToTable("FoodOrders");
                });

            modelBuilder.Entity("FastFoodOnline.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Amount");

                    b.Property<float>("EarnedLoyaltyPoints");

                    b.Property<DateTime>("PayedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now','localtime')");

                    b.Property<int>("PaymentMethodId");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FastFoodOnline.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("FastFoodOnline.Models.SentEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<int>("PaymentId");

                    b.Property<DateTime>("SentDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now','localtime')");

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("SentEmails");
                });

            modelBuilder.Entity("FastFoodOnline.Models.SentMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<int>("PaymentId");

                    b.Property<DateTime>("SentDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now','localtime')");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("SentMessages");
                });

            modelBuilder.Entity("FastFoodOnline.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte>("Gender");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<float>("LoyaltyPoints")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0f);

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("RegisteredDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now','localtime')");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FastFoodOnline.Models.FoodOrder", b =>
                {
                    b.HasOne("FastFoodOnline.Models.Food", "Food")
                        .WithMany("FoodOrders")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FastFoodOnline.Models.Payment", "Payment")
                        .WithMany("FoodOrders")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FastFoodOnline.Models.Payment", b =>
                {
                    b.HasOne("FastFoodOnline.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FastFoodOnline.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FastFoodOnline.Models.SentEmail", b =>
                {
                    b.HasOne("FastFoodOnline.Models.Payment", "Payment")
                        .WithOne("SentEmail")
                        .HasForeignKey("FastFoodOnline.Models.SentEmail", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FastFoodOnline.Models.User", "User")
                        .WithMany("SentEmails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FastFoodOnline.Models.SentMessage", b =>
                {
                    b.HasOne("FastFoodOnline.Models.Payment", "Payment")
                        .WithOne("SentMessage")
                        .HasForeignKey("FastFoodOnline.Models.SentMessage", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FastFoodOnline.Models.User", "User")
                        .WithMany("SentMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
